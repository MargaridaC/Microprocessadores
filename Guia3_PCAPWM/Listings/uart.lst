C51 COMPILER V9.60.0.0   UART                                                              05/11/2020 11:50:19 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\Objects\uart.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE uart.c OPTIMIZE(0,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\uart
                    -.lst) TABS(2) OBJECT(.\Objects\uart.obj)

line level    source

   1          #pragma large
   2          
   3          #include "uart.h"
   4          #include <REG51F380.H>
   5          #include <stdio.h>
   6          
   7          #define DEBUG 1
   8          #define EMPTY 95
   9          
  10          char ReadQ = 0;
  11          char func = 255;
  12          char i;
  13          
  14          unsigned char letrinha = 0;
  15          char DutyCycle100 = 50;
  16          char DutyCycle255 = 128;
  17          int Recieved = 0;
  18          int RecievedAnt = 0;
  19          unsigned char UARTBuffer[8];
  20          bit flagTrama = 0, TramaCompleta = 0;
  21          int Read = 0;
  22          unsigned char UARTBufferindex = 0;
  23          unsigned char UARTFunction[8];
  24          
  25          void encode () {
  26   1            //DebugPrint();
  27   1            //DutyCheck();
  28   1            if (TramaCompleta == 1)
  29   1              ;//ReadUARTBuff();
  30   1            if (flagTrama == 1) {
  31   2              ApplyFunction();
  32   2              Reset();
  33   2            }
  34   1      }
  35          
  36          void Reset() {
  37   1        flagTrama = 0;
  38   1        Recieved = 0;
  39   1        UARTBufferindex = 0;
  40   1        Read = 0;
  41   1        for (i = 0; i < 8; i++) {
  42   2          UARTFunction[i] = EMPTY;
  43   2          UARTBuffer[i] = EMPTY;
  44   2        }
  45   1      }
  46          
  47          char StringCompare(const char str1[8],const  char str2[8]) {
  48   1        char c = 0;
  49   1        for (i = 0; i <= (int)(str2[1] - 47); i++)
  50   1          c += (str1[i] != str2[i]) ? 1 : 0;
  51   1        return (c == 0 ? (char)1 : (char)0);
  52   1      }
  53          
  54          void ApplyFunction() {
C51 COMPILER V9.60.0.0   UART                                                              05/11/2020 11:50:19 PAGE 2   

  55   1      /*
  56   1        if (StringCompare(UARTFunction, "T5D OFF")) {
  57   1          ;//printf("PWM OFF \n");
  58   1        } else if (StringCompare(UARTFunction, "T4D ON")) {
  59   1          ;//printf("PWM ON \n");
  60   1        } else if (StringCompare(UARTFunction, "T3D ?")) {
  61   1          ;//printf("\nDutyCycle: %d \%\n", (short)DutyCycle100);
  62   1        } else if (StringCompare(UARTFunction, "T3D +")) {
  63   1          DutyCycle100++;
  64   1        } else*/ if (0 == 0){//StringCompare(UARTFunction, "T3D -")) {
  65   2          DutyCycle100--;
  66   2        } else if (UARTFunction[4] <= 57 && UARTFunction[4] >= 48) {
  67   2          if(UARTFunction[1] == 51)
  68   2            DutyCycle100 = (short)(UARTFunction[4]-48);
  69   2          else if(UARTFunction[1] == 53)
  70   2            DutyCycle100 = 100;
  71   2          else
  72   2            DutyCycle100 = (short)(UARTFunction[4]-48)*10 + (UARTFunction[5]-48);
  73   2      
  74   2        }
  75   1      }
  76          
  77          void AddToUARTBuff(char add) {
  78   1        UARTBuffer[UARTBufferindex] = add;
  79   1        UARTBufferindex++;
  80   1        UARTBufferindex &= 8-1;
  81   1      }
  82          
  83          void ReadUARTBuff() {
  84   1        char ReadIndex = 0;
  85   1        char count = 0, i = 0, TramaSize = 0;
  86   1        char vec[8];
  87   1        unsigned char rcv;
  88   1      
  89   1        //printf("\n");
  90   1        while(ReadIndex < Read)  {
  91   2          TramaCompleta = 0;
  92   2          rcv=UARTBuffer[ReadIndex];
  93   2          ReadIndex++;
  94   2          if(count==0 && (rcv==84 || rcv ==116)) {
  95   3            vec[count]=rcv;
  96   3            count++;
  97   3          }
  98   2          else if(count==1)  {
  99   3            vec[count]=rcv;
 100   3            TramaSize = rcv - 48;
 101   3            count++;
 102   3          }
 103   2          else if(count>0) {
 104   3            vec[count]=rcv;
 105   3            count++;
 106   3            if(count>=(TramaSize+3)) {
 107   4              count=0;
 108   4              if(vec[TramaSize+2]==13 && flagTrama==0) {
 109   5                  for(i=0;i<=TramaSize+2;i++) {
 110   6                    UARTFunction[i]=vec[i];
 111   6                  }
 112   5                  flagTrama=1;
 113   5              } else
 114   4                ;//printf("Comando Errado ou Inexistente\n");
 115   4            }
 116   3          }
C51 COMPILER V9.60.0.0   UART                                                              05/11/2020 11:50:19 PAGE 3   

 117   2        }
 118   1        ConvertToCapital(UARTFunction);
 119   1      }
 120          
 121          void ConvertToCapital(char *str) {
 122   1          char i = 0;
 123   1          while(str[i] != '\0') {
 124   2            str[i] -= (str[i] <= 172 && str[i] >= 97) ? 32 : 0;
 125   2            i++;
 126   2          }
 127   1      }
 128          
 129          void DutyCheck() {
 130   1            if(DutyCycle100 > 100)
 131   1              DutyCycle100 = 100;
 132   1            if(DutyCycle100 < 0)
 133   1              DutyCycle100 = 0;
 134   1            DutyCycle255 = (int)DutyCycle100*2.55;
 135   1            if (PCA0CPH0 != DutyCycle255) {
 136   2              PCA0CPH0 = DutyCycle255;
 137   2              //printf("\nDutyCycle: %d \%\n", (short)DutyCycle100);
 138   2            }
 139   1      }
 140          //mt estranho!
 141          
 142          
 143          /*void getkey ()  interrupt 4{
 144            if (RI0 == 1) {
 145              RI0 = 0;
 146              letrinha = SBUF0;
 147              if (letrinha != 8) {
 148                ;//AddToUARTBuff(letrinha);
 149                Recieved++;
 150                if (letrinha == 13) {
 151                  Read = Recieved;
 152                  Recieved = 0;
 153                  UARTBufferindex = 0;
 154                  TramaCompleta = 1;
 155                }
 156              } else {
 157                Recieved --;
 158                UARTBufferindex--;
 159                if(Recieved < 0)
 160                  Recieved = 0;
 161                if(UARTBufferindex < 0 || UARTBufferindex == 255)
 162                  UARTBufferindex = 0;
 163                //UARTBuffer[UARTBufferindex] = EMPTY;
 164              }
 165          
 166            }
 167            if (TI0 == 1) {
 168          
 169            }
 170          }*/
 171          
 172          void DutyChange(char change, bit what) {
 173   1        //DutyCycle100 = (what == 1 ? (DutyCycle100 + change) : change);
 174   1      }
*** WARNING C280 IN LINE 172 OF uart.c: 'change': unreferenced local variable
*** WARNING C280 IN LINE 172 OF uart.c: 'what': unreferenced local variable
 175          
 176          void DebugPrint() {
C51 COMPILER V9.60.0.0   UART                                                              05/11/2020 11:50:19 PAGE 4   

 177   1      
 178   1            if (Recieved != RecievedAnt && DEBUG) {
 179   2              ;//printf("\n");
 180   2              for (i = 0; i < 8; i++)
 181   2                if(UARTBuffer[i] != 13)
 182   2                  ;//printf("%c ", UARTBuffer[i]);
 183   2                else
 184   2                  ;//printf("\\n ");
 185   2              RecievedAnt = Recieved;
 186   2            }
 187   1      
 188   1      }
*** WARNING C294 IN LINE 67 OF uart.c: unreachable code
*** WARNING C294 IN LINE 67 OF uart.c: unreachable code


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1369    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     55    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  4 WARNING(S),  0 ERROR(S)
