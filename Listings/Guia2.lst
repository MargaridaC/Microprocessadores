C51 COMPILER V9.60.0.0   GUIA2                                                             03/22/2020 02:12:54 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE GUIA2
OBJECT MODULE PLACED IN .\Objects\Guia2.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Guia2.c OPTIMIZE(0,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\Gui
                    -a2.lst) TABS(2) OBJECT(.\Objects\Guia2.obj)

line level    source

   1          #include <REG51F380.H>
   2          
   3          /*
   4            Array de digitos (P2)
   5            Array com a chave de Segurança
   6            Array da chave Mestre
   7            Array de utilizaçao
   8            
   9            trys
  10            valid
  11            timeout 
  12          */
  13          
  14          unsigned char code Numeros[]={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90,0x88,0x83,0xc6,0xa1, 0x86,
             -0x8e};
  15          
  16          #define RECOVERY 0
  17          #define LOCKED 1
  18          #define DECRYPT 2
  19          #define FAIL 3
  20          #define BLOCKED 4
  21          #define OPEN 5
  22          #define ENCRYPT 6
  23          
  24          #define TENTATIVAS_COFRE 3
  25          #define SIZE_CHAVES 4
  26          
  27          sbit P0_7 = (P0^7);
  28          sbit P0_6 = (P0^6);
  29          sbit P2_7 = (P2^7);
  30          sbit P2_6 = (P2^6);
  31          
  32          char PB1C = 0;
  33          bit PB1b = 0;
  34          char PB2C = 0;
  35          bit PB2b = 0;
  36          
  37          char idata Astate _at_ 0x80;
  38          char idata Nstate _at_ 0x81;
  39          char idata Vstate _at_ 0x82;
  40          char idata Trys  _at_ 0x83;
  41          char idata USR_KEY[SIZE_CHAVES] _at_ 0x90;
  42          char idata SEC_KEY[SIZE_CHAVES] _at_ 0x98;
  43          
  44          bit ClicaBotoes = 0;    //KLL
  45          bit KLICKSet = 0;       //KSS
  46          bit KLICKLoad = 0;      
  47          bit PrimeiraVez = 1;    //KLO
  48          bit VALID = 0;
  49          char index = 0;
  50          char Digits = 0;
  51          char i = 0;
  52          int count1;
  53          int count;
C51 COMPILER V9.60.0.0   GUIA2                                                             03/22/2020 02:12:54 PAGE 2   

  54          
  55          void Update_Disp(char t)
  56          {
  57   1        P2 = Numeros[t];
  58   1      }
  59          
  60          
  61          void Init_Device( void )
  62          {
  63   1        PCA0MD = 0;
  64   1        FLSCL = 0x90;
  65   1        CLKSEL = 0x03;
  66   1        
  67   1        XBR0 = 0x01;
  68   1        XBR1 = 0x40;
  69   1        
  70   1        TMOD  =   TMOD  | 0x02;
  71   1        CKCON =   CKCON | 0x02;
  72   1        TH0   =   -250;
  73   1        TL0   =   -250;
  74   1        IE    = 0x82;
  75   1        TR0   =   0;
  76   1      }
  77          
  78          
  79          void Timer0 ( void ) interrupt 1 {
  80   1        count1 --;
  81   1        if (count1 == 0){
  82   2          P2_7 = !P2_7;
  83   2          count --;
  84   2          count1 = 2000;
  85   2        }
  86   1        if (count == 0){
  87   2          Nstate = ENCRYPT;
  88   2          ClicaBotoes = 0;
  89   2          TR0 = 0;
  90   2          P2_7 = 1;
  91   2        }
  92   1      }
  93          
  94          void F_Recover ( void ) {
  95   1        Nstate = LOCKED;
  96   1        ClicaBotoes = 0;
  97   1        Trys = 0;
  98   1      }
  99          
 100          
 101          void F_Locked( void ) {
 102   1        if (PrimeiraVez == 1) {
 103   2          Digits = 0;
 104   2          PrimeiraVez = 0;
 105   2          index = 0;
 106   2        } else if (KLICKSet == 1) {
 107   2          index ++;
 108   2        } else {
 109   2          Digits ++;
 110   2          USR_KEY[Digits - 1] = index;
 111   2          index = 0;
 112   2        }
 113   1        Update_Disp(index);
 114   1        P3 = Numeros[SEC_KEY[Digits]];
 115   1        Nstate = LOCKED;
C51 COMPILER V9.60.0.0   GUIA2                                                             03/22/2020 02:12:54 PAGE 3   

 116   1        ClicaBotoes = 1;
 117   1        if(Digits == 4) {
 118   2          ClicaBotoes = 0; 
 119   2          Nstate = DECRYPT;
 120   2        }
 121   1      }
 122          
 123          
 124          void F_Decrypt( void ) {
 125   1        char j;
 126   1        char t = 0;
 127   1        for(j = 0 ;j < SIZE_CHAVES; j++)
 128   1          if(USR_KEY[j] != SEC_KEY[j])
 129   1            t ++; 
 130   1          
 131   1        if (t == 0){
 132   2          VALID = 1;
 133   2          Nstate = OPEN;
 134   2        } else {
 135   2          VALID = 0;
 136   2          Nstate = FAIL;
 137   2        }
 138   1      }
 139          
 140          /*void Delay(char tempo)
 141          {
 142            while (tempo != 0)
 143              tempo --;
 144          }*/
 145          
 146          
 147          void F_Fail() {
 148   1        Trys ++;
 149   1        if(Trys <= TENTATIVAS_COFRE-1) {//Locked + Delay
 150   2          for(i = 0; i < Trys; i++)
 151   2            ;//Delay(5);
 152   2          Nstate = LOCKED;
 153   2        }
 154   1        else {
 155   2          Nstate = BLOCKED;
 156   2        }
 157   1        ClicaBotoes = 0;    
 158   1      }
 159          
 160          
 161          void F_Blocked ( void ) {
 162   1        while(1) {
 163   2          if (P0_6 == 0 && P0_7 == 0)
 164   2            Vstate = RECOVERY;
 165   2        }
 166   1      }
 167          
 168          
 169          void F_Open( void ){
 170   1        Nstate = LOCKED;
 171   1        TR0 = 1;
 172   1        ClicaBotoes = 1;
 173   1        Trys = 0;
 174   1        P2 = 163;
 175   1        if (PrimeiraVez == 1){
 176   2          PrimeiraVez = 0;
 177   2          P2_7 = 0;
C51 COMPILER V9.60.0.0   GUIA2                                                             03/22/2020 02:12:54 PAGE 4   

 178   2          count = 10;
 179   2          count1 = 2000;
 180   2        }
 181   1      }
 182          
 183          
 184          void F_Encrypt( void ) {
 185   1        if (PrimeiraVez == 1) {
 186   2          Digits = 0;
 187   2          PrimeiraVez = 0;
 188   2          index = 0;
 189   2        } else if (KLICKSet == 1)
 190   1          index ++;
 191   1        else {
 192   2          Digits ++;
 193   2          USR_KEY[Digits-1] = index;
 194   2          index = 0;
 195   2        }
 196   1        P3 = Numeros[USR_KEY[Digits-2]];
 197   1        Update_Disp(index);
 198   1        Nstate = ENCRYPT;
 199   1        ClicaBotoes = 1;
 200   1        if (Digits == 4)
 201   1        {
 202   2          for (i = 0; i++; i < SIZE_CHAVES)
 203   2            SEC_KEY[i] = USR_KEY[i];
 204   2          Nstate = LOCKED;
 205   2        }
 206   1      }
 207          
 208          
 209          void le_botoes ( void ) {
 210   1        /*
 211   1        while(!PB1b && !PB2b) {
 212   1          if(P0_7 == 1 && PB1C < 127)
 213   1            PB1C++;
 214   1          if(PB1C == 127)
 215   1            PB1b = 1;
 216   1            KLICKSet = 1;
 217   1          if(P0_6 == 1 && PB2C < 127)
 218   1            PB2C++;
 219   1          if(PB2C == 127) {
 220   1            PB2b = 1;
 221   1            KLICKLoad = 1;
 222   1          }
 223   1        }
 224   1        
 225   1        
 226   1        while(PB1b || PB2b) {
 227   1          if(P0_7 == 0 && PB1C > 0)
 228   1            PB1C--;
 229   1          if(PB1C == 0)
 230   1            PB1b = 0;
 231   1          
 232   1          if(P0_6 == 0 && PB2C > 0)
 233   1            PB2C--;
 234   1          if(PB2C == 0)
 235   1            PB2b = 0;
 236   1        }
 237   1          */
 238   1        if (P0_7 == 0) {
 239   2          KLICKLoad = 1;
C51 COMPILER V9.60.0.0   GUIA2                                                             03/22/2020 02:12:54 PAGE 5   

 240   2          while(P0_7 == 0)
 241   2            ;
 242   2        }
 243   1        if (P0_6 == 0) {
 244   2          KLICKSet = 1;
 245   2          while(P0_6 == 0)
 246   2            ;
 247   2        }
 248   1      }
 249          
 250          
 251          
 252          
 253          
 254          void main( void ) {
 255   1        Init_Device();
 256   1        
 257   1        Astate = Vstate;
 258   1        Nstate = Vstate;
 259   1        SEC_KEY[0] = 1;
 260   1        SEC_KEY[1] = 2;
 261   1        SEC_KEY[2] = 3;
 262   1        SEC_KEY[3] = 4;
 263   1        
 264   1        while(1) {
 265   2          KLICKLoad = 0;
 266   2          KLICKSet = 0; 
 267   2          while(!KLICKLoad && !KLICKSet && ClicaBotoes)
 268   2            le_botoes();    //vamos ter que obrigar a so sair da rotina quando levantamos o botao
 269   2                            //vamos ter que tualizar as variaveis KLICK para saber que botao clicamos antes de entrar no es
             -tado
 270   2          if(Astate == OPEN && (KLICKSet == 1 || KLICKLoad == 1))
 271   2            TR0 = 0;
 272   2          
 273   2          if(Astate != Nstate) {
 274   3            Astate = Nstate;
 275   3            PrimeiraVez = 1;
 276   3          }
 277   2          
 278   2          Vstate = Astate;
 279   2          P1 = Numeros [Astate];
 280   2          
 281   2          switch (Astate) {
 282   3            case RECOVERY:  F_Recover();
 283   3                            break;
 284   3            case LOCKED:    F_Locked();
 285   3                            break;
 286   3            case DECRYPT:   F_Decrypt();
 287   3                            break;
 288   3            case FAIL:      while(P0_6 == 1);
 289   3                            F_Fail();
 290   3                            break;
 291   3            case BLOCKED:   F_Blocked();
 292   3                            break;
 293   3            case OPEN:      F_Open();
 294   3                            break;
 295   3            case ENCRYPT:   F_Encrypt();
 296   3                            break;
 297   3          }
 298   2        }
 299   1      }

C51 COMPILER V9.60.0.0   GUIA2                                                             03/22/2020 02:12:54 PAGE 6   


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    752    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     12    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      7    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
